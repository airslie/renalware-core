version: 2
jobs:
  build:
    working_directory: ~/renalwarev2
    docker:
      # this is important to use proper image with browsers support
      - image: circleci/ruby:2.7.0-node-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: renalware
          RAILS_ENV: test
          BUNDLER_VERSION: 2.0.1
      - image: circleci/postgres:11.2-alpine-ram
      - image: redis:3.2.7

    parallelism: 1

    steps:
      - run:
          name: install dependencies
          command: |
            gem update --system
            gem install bundler

      - checkout
      - setup_remote_docker

      - run: docker container ls
      # - run: touch test.txt
      # - run: docker cp test.txt

      # Also pull the UKRDC XSDs
      - run: git submodule sync ; git submodule update --init

      - run: mkdir -p ./tmp/test-artifacts
      - run: mkdir -p ./coverage

      # Restore bundle cache
      - type: cache-restore
        key: renalwarev2-{{ checksum "Gemfile.lock" }}

      # Bundle install dependencies
      - run: bundle install --path vendor/bundle --jobs=3 --retry=3

      # Store bundle cache
      - type: cache-save
        key: renalwarev2-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

      # https://codegists.com/code/circleci-2.0-configuration/
      - run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run: chmod +x ./cc-test-reporter

      - run:
          name: Prepare to install postgresql-client 11
          command: |
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            RELEASE=$(lsb_release -cs)
            echo "deb http://apt.postgresql.org/pub/repos/apt/ ${RELEASE}"-pgdg main | sudo tee  /etc/apt/sources.list.d/pgdg.list

      - run: sudo apt-get update
      - run: sudo apt install pandoc unzip unrar-free ghostscript postgresql-client-11

      # Database set-up
      - run: cp ./spec/dummy/config/database.circle.yml ./spec/dummy/config/database.yml
      - run: RAILS_ENV=test bundle exec rake app:db:create app:db:structure:load

      # Check gems for security vulnerabilities in gems
      - run: bundle exec bundle-audit update && bundle exec bundle-audit check

      - run:
          name: Notify Code Climate of a pending report
          command: |
            ./cc-test-reporter before-build

      # RSpec
      - type: shell
        command: |
          case $CIRCLE_NODE_INDEX in 0) bundle exec rspec \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --fail-fast \
                            --format progress ;; esac

      # Cucumber domain features
      - type: shell
        command: |
          case $CIRCLE_NODE_INDEX in 0) bundle exec cucumber --format progress \
                               --format junit \
                               --out /tmp/test-results/cucumber-domain.xml ;; esac

      # Cucumber web features
      - type: shell
        command: |
          case $CIRCLE_NODE_INDEX in 0) TEST_DEPTH=web bundle exec cucumber \
                               -p rake_web \
                               --format progress \
                               --format junit \
                               --out /tmp/test-results/cucumber-web.xml ;; esac

      # Save artifacts ie coverage data
      - store_artifacts:
          path: ./tmp/test-artifacts
          destination: build

      # Upload test results (junit xml)
      - store_test_results:
          path: /tmp/test-results

      - run:
          name: Report code coverage to Code Climate
          command: |
            ./cc-test-reporter after-build -t simplecov --exit-code $? || true

      # Test seeding
      - run: case $CIRCLE_NODE_INDEX in 0) pushd ./spec/dummy ; bundle exec rails db:environment:set RAILS_ENV=test ; popd ;; esac
      - run: case $CIRCLE_NODE_INDEX in 0) bundle exec rake app:db:migrate:reset app:db:seed RAILS_ENV=test ;; esac
