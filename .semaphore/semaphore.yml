# Use the latest stable version of Semaphore 2.0 YML syntax :
version: v1.0
name: renalwarev2

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images.
# See https://docs.semaphoreci.com/article/20-machine-types
# and https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

fail_fast:
  stop:
    when: "branch != 'master'"

auto_cancel:
  running:
    when: "branch != 'master'"

# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: Test setup
    task:
      jobs:
        - name: bundle
          commands:
          # Checkout code from Git repository. This step is mandatory if the
          # job is to work with your code.
          # Optionally you may use --use-cache flag to avoid roundtrip to
          # remote repository.
          # See https://docs.semaphoreci.com/article/54-toolbox-reference#libcheckout
          - checkout
          # Restore dependencies from cache.
          # Read about caching: https://docs.semaphoreci.com/article/54-toolbox-reference#cache
          - cache restore gems-$SEMAPHORE_GIT_BRANCH-$(checksum Gemfile.lock),gems-$SEMAPHORE_GIT_BRANCH-,gems-master-
          # Set Ruby version:
          - sem-version ruby 3.0.1
          - sem-version node 10.19.0
          - bundle install --deployment -j 4 --path vendor/bundle
          # Store the latest version of dependencies in cache,
          # to be used in next blocks and future workflows:
          - cache store gems-$SEMAPHORE_GIT_BRANCH-$(checksum Gemfile.lock) vendor/bundle

          # - cache restore node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum yarn.lock)
          - yarn install --checkfiles
          - bin/check_rollup_has_compiled_assets
          # - cache store node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum yarn.lock)

  - name: Tests
    task:
      # This block runs two jobs in parallel and they both share common
      # setup steps. We can group them in a prologue.
      # See https://docs.semaphoreci.com/article/50-pipeline-yaml#prologue
      env_vars:
        - name: RAILS_ENV
          value: test
        - name: SEMAPHORECI
          value: "1"

      secrets:
        - name: aws
        - name: renalware-core-env

      prologue:
        commands:
          - checkout
          - cache restore gems-$SEMAPHORE_GIT_BRANCH-$(checksum Gemfile.lock),gems-$SEMAPHORE_GIT_BRANCH-,gems-master-
          - git submodule sync ; git submodule update --init
          # Be sure to install a new-ish version of pandoc that supports the -eol arg
          # so we can use CRLF/Windows endings
          - curl -sLO https://github.com/jgm/pandoc/releases/download/2.11.2/pandoc-2.11.2-1-amd64.deb && sudo dpkg -i pandoc-2.11.2-1-amd64.deb
          # We also need ghostscript
          - sudo apt install -qq -y ghostscript

          # codeclimate setup - see https://docs.semaphoreci.com/article/148-configuring-parallel-tests-with-code-climate
          - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          - chmod +x ./cc-test-reporter
          - ./cc-test-reporter before-build

          # Start Postgres database service.
          # See https://docs.semaphoreci.com/article/54-toolbox-reference#sem-service
          - sem-service start postgres 12.1
          - sem-version ruby 3.0.1
          - sem-version node 10.13.0

          # postgres client update so pg_dump resolves to 12.x
          - wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          - echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |sudo tee  /etc/apt/sources.list.d/pgdg.list
          - sudo apt update
          - sudo apt-get install -qq -y postgresql-client-12

          - bundle install --deployment --path vendor/bundle
          # - bundle exec rails app:yarn:install
          - yarn install --checkfiles

          # Use CI's database.yml
          - cp ./.semaphore/database.yml ./spec/dummy/config/database.yml
          - bundle exec rake db:create
          - bundle exec rake db:migrate

      epilogue:
        always:
          commands:
            - test-results publish /tmp/junit.xml

      jobs:
      - name: RSpec tests
        commands:
          - bundle exec rspec --format RspecJunitFormatter --out /tmp/junit.xml --format progress
          - ls ./coverage
          - ./cc-test-reporter format-coverage -t simplecov --output "coverage/codeclimate.$SEMAPHORE_JOB_ID.json"
          - ls ./coverage
          - aws s3 cp "coverage/codeclimate.$SEMAPHORE_JOB_ID.json" "s3://renalware-ci-coverage/$SEMAPHORE_PROJECT_NAME/$SEMAPHORE_GIT_BRANCH/coverage/$SEMAPHORE_WORKFLOW_ID/"

      - name: Cucumber tests
        commands:
          - bundle exec cucumber --format junit --out /tmp/junit.xml --format progress
          - TEST_DEPTH=web bundle exec cucumber -p rake_web --format junit --out /tmp/junit.xml --format progress
          - ./cc-test-reporter format-coverage -t simplecov --output "coverage/codeclimate.$SEMAPHORE_JOB_ID.json"
          - aws s3 cp "coverage/codeclimate.$SEMAPHORE_JOB_ID.json" "s3://renalware-ci-coverage/$SEMAPHORE_PROJECT_NAME/$SEMAPHORE_GIT_BRANCH/coverage/$SEMAPHORE_WORKFLOW_ID/"

  # - name: Merging test coverage and upload to codeclimate
  #   task:
  #     secrets:
  #       - name: aws
  #       - name: renalware-core-env

  #     jobs:
  #       - name: Merge and upload
  #         commands:
  #           # See the (flawed) codeclimate setup: see https://docs.semaphoreci.com/article/148-configuring-parallel-tests-with-code-climate

  #           # 1. Download and install the code climate test reporter
  #           - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  #           - chmod +x ./cc-test-reporter

  #           # 2. Pull down the code coverage json files generated during this build and put them into ./coverage
  #           #    There will be 1 for each parallel build in the previous block - so eg one for rspec and one for cucumber spec.
  #           - mkdir ./coverage
  #           - aws s3 sync "s3://renalware-ci-coverage/$SEMAPHORE_PROJECT_NAME/$SEMAPHORE_GIT_BRANCH/coverage/$SEMAPHORE_WORKFLOW_ID/" coverage/

  #           # 3. Merge the coverage json files
  #           - ./cc-test-reporter sum-coverage --parts $(ls -1 coverage/ | wc -l) coverage/codeclimate.*.json

  #           # 4. Send the merged report to Code Climate
  #           - ./cc-test-reporter upload-coverage
