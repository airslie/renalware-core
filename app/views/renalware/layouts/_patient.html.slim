- content_for(:header) do
  = render "renalware/patients/header", patient: current_patient

- content_for(:css) do
  / This is to solve an issue where if we redirect from a controller after eg a #create action
  / when the create button was inside a turboframe (eg a modal), and we want to reload the page that
  / that we are redirectiing to (ie a page with this layout, so any patient page). We could use
  / target: _top in the turboframe but this breaks in-modal validations.
  / From the docs:
  /   https://turbo.hotwired.dev/handbook/frames#“breaking-out”-from-a-frame
  /   Pages that specify turbo-visit=control reload will always result in a full-page navigation,
  /   even if the request originated from inside a frame.
  / This meta tag does not seem to break other turboframes.
  / Note there is a helper 'turbo_page_requires_reload' but this does not work atm, perhaps as we
  / have turbo disabled by default and selectively enable it.
  meta name="turbo-visit-control" content="reload"

- generate_page_title(local_assigns: local_assigns,
                      patient: current_patient)

nav.patient-side-nav.full-screenable
  .layout-wrapper
    = render Renalware::Patients::SideMenuComponent.new(patient: current_patient)

.main-content.patient-content.full-screenable
  .layout-wrapper
    = render "renalware/patients/mini_profile", patient: current_patient
    / adding .patient-alerts--sticky will stick the alerts under the patient header on scroll
    /.patient-alerts.patient-alerts--sticky.lozenge
    = render "renalware/clinical/header", patient: current_patient
    = render Renalware::Patients::NagsComponent.new(current_user: current_user, patient: current_patient)
    .patient-alerts.lozenge
      ul
        = render "renalware/patients/alerts/list", patient: current_patient
        = render "renalware/research/alerts", patient: current_patient
        = render "renalware/events/events/alerts", patient: current_patient

    .row.collapse
      - if local_assigns[:title].present?
        ul.page-heading.columns.small-12
          li
            h1
              = breadcrumbs_and_title(breadcrumbs: local_assigns[:breadcrumbs],
                                      title: local_assigns[:title])
          li.page-actions
            / Output any page-level actions
            = yield(:actions)

      - if content_for?(:page_navigation)
        .page-navigation= yield(:page_navigation)
      - else
        - unless local_assigns[:skip_top_navigation].present?
          - partial = local_assigns[:navigation_partial] || "navigation"

          / Be sure to pass on any locals passed to us, along with the patient
          / if not already provided
          = render_if_exists partial, local_assigns.reverse_merge!(patient: current_patient)
    .row
      = yield(:filters)
      = yield
      = yield(:below_content)
