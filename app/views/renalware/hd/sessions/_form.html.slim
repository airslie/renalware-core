ruby:
  back_path = patient_hd_dashboard_path(@patient)

= f.input :type, as: :hidden
.row.top
  .large-12.columns
    = render "form_actions", f: f, back_path: back_path, session: session, patient: @patient

.form-content
  = f.simple_fields_for :document, f.object.document do |fd|

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "Sign-In", name: "signin" } do

      / Cascading dropdowns hospital units -> hd stations
      div(data-controller="dependent-select"
          data-dependent-select-display-attribute="name"
          data-dependent-select-source-route-part="hd/units"
          data-dependent-select-target-route-part="stations")

        / The pre-loaded unit here will be the one specified in their hd profile
        = f.association :hospital_unit,
                        as: :grouped_select,
                        group_method: :hd_sites,
                        collection: Renalware::Hospitals::Centre.with_hd_sites.ordered,
                        label_method: :to_s,
                        wrapper: :horizontal_medium,
                        input_html: { data: { "dependent-select-target" => "source", action: "dependent-select#handleSelectChange" }}

        / When the user changes the unit, the stations list is refreshed using a stimulus controller
        / TODO: Need to also load in the initial list of stations for the current unit, and allow a blank option
        = f.association :station,
                        collection: Renalware::HD::Station.where(hospital_unit_id: session.hospital_unit_id),
                        label_method: :name,
                        wrapper: :horizontal_medium,
                        input_html: { "data-dependent-select-target" => "target" }


      = f.fields_for :duration_form, f.object.duration_form do |fdur|
        - previous_sessions_component = Renalware::HD::Sessions::PreviousSessionDatesComponent.new(patient: patient)

        = render Renalware::InputValueAlerterComponent.new( \
          not_recommended_values: previous_sessions_component.not_recommended_values(session), \
          message: "A session for this date already exists") do |component|
          - component.with_input do
            = fdur.input :start_date, as: :flatpickr, wrapper: :horizontal_datepicker, \
              input_html: { data: component.input_date_attributes }

        = render previous_sessions_component

        = fdur.input :start_time, as: :clock_picker, wrapper: :horizontal_clockpicker

      = f.association :signed_on_by,
                      as: :user_picker,
                      collection: Renalware::User.ordered,
                      wrapper: :horizontal_medium

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "Sign-Off", name: "signoff" } do

      = f.simple_fields_for :duration_form, f.object.duration_form do |fdur|
        = fdur.input :end_time, as: :clock_picker, wrapper: :horizontal_clockpicker
        = fdur.input :overnight_dialysis, as: :boolean

      = f.association :signed_off_by,
                      as: :user_picker,
                      collection: Renalware::User.ordered,
                      wrapper: :horizontal_medium

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "Session Info", name: "info" } do

      = fd.simple_fields_for :info, fd.object.info do |fcm|
        = fcm.input :hd_type, as: :inline_radio_buttons, wrapper: :horizontal_medium
        fieldset
          legend Access
          = fcm.input :access_type, as: :select, value_method: :name,
              collection: Renalware::Accesses::Type.relevant_to_access_profiles,
              wrapper: :horizontal_small
          = fcm.input :access_side, wrapper: :horizontal_small
          = fcm.input :access_confirmed, as: :boolean, wrapper: :horizontal_medium
          = fcm.input :is_access_first_use, as: :inline_radio_buttons, wrapper: :horizontal_medium
          = fcm.input :fistula_plus_line, as: :inline_radio_buttons, wrapper: :horizontal_medium
          = fcm.input :single_needle, as: :inline_radio_buttons, wrapper: :horizontal_medium
          = fcm.input :lines_reversed, as: :inline_radio_buttons, wrapper: :horizontal_medium
          = fcm.input :cannulation_type,
                      as: :select,
                      value_method: :name,
                      wrapper: :horizontal_small,
                      collection: Renalware::HD::CannulationType.order(:name)
          = fcm.input :needle_size,
                      as: :select,
                      wrapper: :horizontal_small,
                      collection: Renalware::HD::ProfileDocument::Dialysis.needle_sizes.map(&:to_s)

          = fd.simple_fields_for :complications, fd.object.complications do |fcm|
            = fcm.input :access_site_status, wrapper: :horizontal_small
            = fcm.input :line_exit_site_status,
                        wrapper: :horizontal_tiny,
                        wrapper_hint_class: "",
                        hint: link_to("", "#",
                                      data: { "reveal-id" => "mr-victor-help-modal" }),
                        hint_html: { class: "hint-help-link" }

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "AVF/AVG Assessment", name: "avf_avg_assessment" } do
      = fd.simple_fields_for :avf_avg_assessment, fd.object.avf_avg_assessment do |favf|
        = favf.input :score,
                     wrapper: :horizontal_small,
                     wrapper_hint_class: "",
                     hint: link_to("", "#",
                           data: { "reveal-id" => "avf-assessment-help-modal" }),
                     hint_html: { class: "hint-help-link" }
        = favf.input :aneurysm, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = favf.input :bruit, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = favf.input :thrill, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = favf.input :feel, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = favf.input :safe_to_use, as: :inline_radio_buttons, wrapper: :horizontal_medium

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "Pre-Dialysis Observations", name: "before" } do
      = fd.simple_fields_for :observations_before, fd.object.observations_before do |fcm|
        = fcm.input :weight_measured, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = fcm.input :weight, wrapper: :horizontal_tiny
        = fcm.input :pulse, wrapper: :horizontal_tiny
        = render_input fcm, :blood_pressure
        = fcm.input :temperature_measured, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = fcm.input :temperature, wrapper: :horizontal_tiny
        = fcm.input :respiratory_rate_measured, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = fcm.input :respiratory_rate, wrapper: :horizontal_tiny
        = fcm.input :bm_stix, wrapper: :horizontal_tiny

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "Post-Dialysis Observations", name: "after" } do
      = fd.simple_fields_for :observations_after, fd.object.observations_after do |fcm|
        = fcm.input :weight_measured, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = fcm.input :weight, wrapper: :horizontal_tiny
        = fcm.input :pulse, wrapper: :horizontal_tiny
        = render_input fcm, :blood_pressure
        = fcm.input :temperature_measured, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = fcm.input :temperature, wrapper: :horizontal_tiny
        = fcm.input :respiratory_rate_measured, as: :inline_radio_buttons, wrapper: :horizontal_medium
        = fcm.input :respiratory_rate, wrapper: :horizontal_tiny
        = fcm.input :bm_stix, wrapper: :horizontal_tiny

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "Dialysis", name: "dialysis" } do
      = fd.simple_fields_for :dialysis, fd.object.dialysis do |fcm|

        = fcm.input :arterial_pressure, wrapper: :horizontal_tiny
        = fcm.input :venous_pressure, wrapper: :horizontal_tiny
        = fcm.input :fluid_removed, wrapper: :horizontal_tiny
        = fcm.input :flow_rate, collection: fcm.object.class.flow_rates, wrapper: :horizontal_tiny
        = fcm.input :blood_flow, wrapper: :horizontal_tiny
        = fcm.input :washback_quality,
                    wrapper: :horizontal_tiny,
                    wrapper_hint_class: "",
                    hint: link_to("", "#", data: { "reveal-id" => "washback-quality-modal" }),
                    hint_html: { class: "hint-help-link" }

        = fcm.input :machine_urr, wrapper: :horizontal_tiny
        = fcm.input :litres_processed, wrapper: :horizontal_tiny
        = f.association :dialysate, wrapper: :horizontal_small
        = fcm.input :machine_ktv, wrapper: :horizontal_tiny
        = fd.simple_fields_for :info, fd.object.info do |fi|
          = fi.input :machine_no, wrapper: :horizontal_tiny

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "HDF", name: "hdf" } do
      = fd.simple_fields_for :hdf, fd.object.hdf do |fcm|
        = fcm.input :subs_fluid_pct, wrapper: :horizontal_tiny
        = fcm.input :subs_rate, wrapper: :horizontal_tiny
        = fcm.input :subs_goal, wrapper: :horizontal_tiny
        = fcm.input :subs_volume, wrapper: :horizontal_tiny

    = render layout: "renalware/shared/fieldset",
        locals: { legend: "Notes/Complications", name: "complications" } do
      = fd.simple_fields_for :complications, fd.object.complications do |fcm|
        / = fcm.input :access_site_status, wrapper: :horizontal_small
        / = fcm.input :line_exit_site_status, wrapper: :horizontal_small
        = fcm.input :was_dressing_changed, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_mrsa_swab, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_mssa_swab, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_intradialytic_hypotension, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_saline_administration, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_cramps, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_headache, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_chest_pain, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_alteplase_urokinase, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :had_blood_transfusion, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :circuit_loss, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :blown_fistula_venous, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :blown_fistula_arterial, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :multiple_cannulation_attempts, as: :inline_radio_buttons, wrapper: :horizontal_small
        = fcm.input :prolonged_bleeding, as: :inline_radio_buttons, wrapper: :horizontal_small

        / Trix notes and insert snippet button
        = f.label :notes, class: "mb-2"
        = snippets_modal_and_link_to_open_it(target_input_for_selected_snippet: ".hd-session-notes")
        = f.input :notes, as: :trix_editor, class: "hd-session-notes", wrapper: :zilch

      = render layout: "renalware/shared/fieldset",
        locals: { legend: "Patient Group Direction medications given", name: "pgd" } do
        .md:w-full.lg:w-2/3.xl:w-1/2
          = f.association :patient_group_directions,
                          label: false,
                          wrapper: :zilch,
                          input_html: { data: { controller: "slimselect" }}
.row
  .large-12.columns
    = render "form_actions", f: f, back_path: back_path, session: session, patient: @patient

#mr-victor-help-modal.reveal-modal.medium(data-reveal style="width: 600px")
  .modal
    .modal__header
      h2 MR VICTOR
      .modal__header-subtitle Multi Racial Visual Inspection Catheter Tool Observation Record
      = render "renalware/shared/modal_close_link"
    .modal__body(style="text-align: center")
      = image_tag(asset_path("renalware/hd/mr_victor.jpg"))

#avf-assessment-help-modal.reveal-modal.medium(data-reveal style="width: 600px")
  .modal
    .modal__header
      h2 AVF/AVG Assessment
      .modal__header-subtitle Arteriovenous Fistula/Graft (AVF/AVG) Pre-Needling Assessment Tool
      = render "renalware/shared/modal_close_link"
    .modal__body(style="text-align: center")
      = image_tag(asset_path("renalware/hd/avf_avg_assessment.jpg"))

= render(Renalware::HD::Sessions::WashbackQualityDialogComponent.new(html_id: "washback-quality-modal"))
/ #washback-quality-modal.reveal-modal.medium(data-reveal style="width: 600px")
/   .modal
/     .modal__header
/       h2 AVF/AVG Assessment
/       .modal__header-subtitle Arteriovenous Fistula/Graft (AVF/AVG) Pre-Needling Assessment Tool
/       = render "renalware/shared/modal_close_link"
/     .modal__body(style="text-align: center")
/       /= image_tag(asset_path("renalware/hd/avf_avg_assessment.jpg"))
/       h1 OK
