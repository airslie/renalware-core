= render "renalware/shared/errors", model: slot

= simple_form_for(slot,
                  url: hd_scheduling_diary_slots_path(slot.diary.id),
                  html: { id: "slot-form", autocomplete: "off" },
                  as: :slot,
                  remote: true,
                  method: :post,
                  wrapper: :horizontal_form) do |f|

  / Hidden fields
  = f.input :station_id, as: :hidden
  = f.input :diurnal_period_code_id, as: :hidden
  = f.input :day_of_week, as: :hidden

  / Data to drive the patient_search_scope select and the dynamically built patient_id select
  - patient_search_options = slot.patient_search_options(request.url)
  - patient_search_collection_options = patient_search_options.map { |key, options| [options[:text], key, options[:meta]] }

  .row
    .col-small-4
      = f.input :patient_search_scope,
                input_html: { \
                  id: :patient_search_scope, \
                  data: { \
                    controller: "select-update-frame",
                    "select-update-frame-frame-id-value": "slotpatientid",
                    "action": "change->select-update-frame#change" } },
                collection: patient_search_collection_options,
                include_blank: false,
                label: "Search"

    .col-small-8
      / When the above patient_search_scope select changes, this turboframe refreshes
      / and displays a patient_id input relevant to the chosen scope; so for example if
      / the scope is :dialysing_on_day then we might display a static collecton of patients, becuase
      / there are not too many of them, but if scope
      / is :dialysing_at_hospital then because there maybe hundreds rather than tens,
      / we use an ajax search to allow the user to find the patient, and the JSON endpoint for the
      / ajax search is defined in patient_search_options[:options_url].
      / See DiarySlotPresenter#patient_search_options for the configuration that drives this
      / by defining scopes in a hash.
      = turbo_frame_tag "slotpatientid" do
        = render Renalware::Patients::LookupComponent.new(form: f,
            **patient_search_options[slot.patient_search_scope.to_sym])

  = f.input :arrival_time, as: :clock_picker, wrapper: :horizontal_clockpicker
  = f.submit "Add for this week only", class: "button save weekly"
  | &nbsp;
  = f.submit "Add to this and all future weeks", class: "button secondary master", name: "master"

  = blank_separator
  = link_to t("btn.cancel"),
           "#",
           "aria-label" => "Close",
           class: "reveal-modal-close"
