/ Render any filters defined in the view (ViewMetadata) #filters hash (hstore).
/ The format of the filters is
/   column_names: filter_type (list|search)
/ e.g
/   sex: :list => will render a dropdown of unique options pulled from the underlying view
/   nhs_number: :search => maps to case insensitive ransack predicate
/   nhs_number_or_local_patient_id: :search => will add _cont to end and use that as the predicate

- return if options.current_view.filters.empty?

= simple_form_for options.search,
                  url: options.report_path_without_params,
                  remote: false,
                  data: { controller: "form", action: "input->form#submit" },
                  method: :get do |f|

  .flex.flex-col.sm:flex-row.items-start.pb-4
    - options.current_view.filters.each do |filter|
      - column = filter.code
      - type = filter.type
      - filter_type = ActiveSupport::StringInquirer.new(type)

      - if filter_type.list?
        / Unique values selected from a dropdown
        .w-full.sm:max-w-xs.pr-2
          = f.input "#{column}_eq",
                    include_blank: true,
                    collection: options.search.klass.distinct(column.to_sym).order(column.to_sym).pluck(column.to_sym).compact,
                    label: column.humanize
          / input_html: { onchange: "this.form.submit();" }
      - elsif filter_type.search?
        / Free text inputs
        .w-full.sm:max-w-xs.pr-2
          = f.input "#{column}_cont", label: column.humanize

    .w-full.sm:max-w-sm.pr-2.pt-5
      .flex.items-center
        noscript
          = f.submit("Filter", class: "button") do
            | Filter
        = link_to "Reset", options.report_path_without_params, class: "mx-3 mb-5"
        = link_to(options.report_csv_download_path_with_params,
                  class: "button secondary",
                  style: "margin-left: 2rem",
                  data: { confirm: "IMPORTANT! (Warning here about data protection)"}) do
          i.fa.fa-download
          | CSV
