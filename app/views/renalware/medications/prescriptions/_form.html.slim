.max-w-4xl.document(data-controller="prescriptions alternative-form-submitter")
  br

  / Use a separate form for updating the route, unit of measure, etc.. after selecting a drug
  = form_with model: false, url: search_url, id: "drug_search_form",
    data: {  turbo: true, turbo_frame: "drug_search_form_frame" },
    input_html: { autocomplete: "off" },
    method: :get do |select_form|

  = simple_form_for prescription,
                    url: update_url,
                    input_html: { autocomplete: "off" },
                    html: { class: "fn-form prescription-form" },
                    wrapper: :horizontal_form do |f|

    = f.hidden_field :treatable_type
    = f.hidden_field :treatable_id
    = hidden_field_tag :return_to, return_to_param
    = render "renalware/shared/errors", model: f.object

    .med-form.content
      div
        .mb-4
          = f.input :drug_id_and_trade_family_id,
            include_blank: false,
            collection: prescription&.drug.present? ? presenter.drugs_collection : [["Please select", nil, "data-placeholder": "true"]],
            disabled: prescription.drug&.inactive?,
            hint: prescription.drug&.inactive? ? "No longer available": nil,
            input_html: { \
              data: { \
                controller: "slimselect-ajax",
                options_url: renalware.prescribable_drugs_drugs_path(term: "REPLACEME", format: :json),
                action: "change->alternative-form-submitter#submit",
                "alternative-form": "drug_search_form",
              } \
            },
            wrapper: :horizontal_medium

        = turbo_frame_tag "drug_search_form_frame" do
          = render "renalware/medications/prescriptions/form_sections/forms", f: f, presenter: presenter

          = f.input :dose_amount,
                    wrapper: :horizontal_small,
                    input_html: { autocomplete: "off", spellcheck: "false" }

          = render "renalware/medications/prescriptions/form_sections/unit_of_measures", f: f, presenter: presenter
          = render "renalware/medications/prescriptions/form_sections/routes", f: f, presenter: presenter

      = render "renalware/medications/prescriptions/form_sections/frequency", f: f, presenter: presenter
      = render "renalware/medications/prescriptions/form_sections/hd", f: f, presenter: presenter

      = f.input :notes,
                wrapper: :horizontal_medium,
                input_html: { autocomplete: "off" }

      = f.input :prescribed_on, as: :flatpickr, wrapper: :horizontal_datepicker

      = f.simple_fields_for(:termination) do |tf|
        = tf.input :terminated_on,
                    as: :flatpickr,
                    required: false,
                    wrapper: :horizontal_datepicker

      = render "renalware/medications/prescriptions/form_sections/provider", f: f, presenter: presenter

    .mt-6
      - back_path = back_url(patient_prescriptions_path(patient, treatable_id: prescription.treatable_id, treatable_type: prescription.treatable_type))

      - if policy(prescription).create?
        = save_or_cancel(form: f, back_path: back_path)
      - else
        = link_to t("btn.cancel"), back_path
