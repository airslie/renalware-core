/ locals: (prescription:)
/ Rails 7.1 strict locals:

ruby:

.mx-auto.max-w-4xl.document(data-controller="prescriptions alternative-form-submitter")
  br

  / Use a separate form for updating the route, unit of measure, etc.. after selecting a drug
  = form_with url: search_url, id: "drug_search_form",
    data: {  turbo: true, turbo_frame: "drug_search_form_frame" },
    method: :get do |select_form|

  = simple_form_for prescription,
                    url: update_url,
                    html: { class: "fn-form prescription-form" },
                    wrapper: :horizontal_form do |f|

    = f.hidden_field :treatable_type
    = f.hidden_field :treatable_id

    = hidden_field_tag :return_to, return_to_param

    = render "renalware/shared/errors", model: f.object


    .med-form.content
      div
        .mb-4
          = f.input :drug_id_and_trade_family_id,
            collection: presenter.drugs_collection,
            prompt: :translate,
            disabled: prescription.drug&.inactive?,
            hint: prescription.drug&.inactive? ? "No longer available": nil,
            input_html: { \
              data: { \
                controller: "slimselect",
                action: "change->alternative-form-submitter#submit",
                "alternative-form": "drug_search_form",
              },
            },
            wrapper: :horizontal_medium

        = turbo_frame_tag "drug_search_form_frame" do
          .mb-4
            = f.association :form,
                            collection: presenter.forms,
                            label_method: :name,
                            input_html: { \
                              data: { \
                                controller: "slimselect",
                                action: "change->alternative-form-submitter#submit",
                                "alternative-form": "drug_search_form",
                              },
                            },
                            prompt: (presenter.forms.size == 1 ? false : :translate),
                            wrapper: :horizontal_medium

          = f.input :dose_amount, wrapper: :horizontal_small

          .mb-4
            = f.association :unit_of_measure,
                            collection: presenter.unit_of_measures,
                            label_method: :name,
                            input_html: { \
                              data: { controller: "slimselect" },
                            },
                            prompt: (presenter.unit_of_measures.size == 1 ? false : :translate),
                            wrapper: :horizontal_medium

          .mb-4
            = f.association :medication_route,
                            collection: presenter.medication_routes,
                            label_method: :name,
                            input_html: { \
                              data: { controller: "slimselect" },
                            },
                            prompt: (presenter.medication_routes.size == 1 ? false : :translate),
                            wrapper: :horizontal_medium


      div data-controller="show-on-selected"
        ruby:
          frequency_is_predefined = presenter.frequencies.find { _1.name == f.object.frequency }
          select_other = presenter.frequencies.size == 1 || (f.object.frequency.present? && !frequency_is_predefined)

        = f.input :frequency, wrapper: :horizontal_small,
          collection: presenter.frequencies,
          label_method: :title,
          value_method: :name,
          input_html: { data: { action: "show-on-selected#select" } },
          selected: select_other ? Renalware::Drugs::Frequency::OTHER_NAME : f.object.frequency

        div[ \
          data-show-on-selected-target="item"
          data-show-on-selected-option="other"
          class=class_names(hidden: !select_other)
        ]
          = f.input :frequency, wrapper: :horizontal_small,
            disabled: !select_other,
            input_html: { value: (f.object.frequency if !frequency_is_predefined), autofocus: true },
            label: t("activerecord.attributes.renalware/medications/prescription.frequency_freeform")

      = f.input :administer_on_hd, wrapper: :horizontal_small
      = f.input :notes, wrapper: :horizontal_medium
      = f.input :prescribed_on, as: :flatpickr, wrapper: :horizontal_datepicker

      = f.simple_fields_for(:termination) do |tf|
        = tf.input :terminated_on,
                    as: :flatpickr,
                    required: false,
                    wrapper: :horizontal_datepicker

      span(data-prescriptions-target= "providers")
        = f.input :provider,
                  collection: present(Renalware::Medications::Provider.codes, Renalware::Medications::ProviderCodePresenter),
                  as: :inline_radio_buttons,
                  label_method: :to_label,
                  wrapper: :horizontal_medium,
                  input_html: { data: { action: "change->prescriptions#toggleDeliveryDates", "prescriptions.target" => "providers"} }

      / Only show this if home_delivery provider is active/selected. See prescriptions stimulus controller.
      .home_delivery_dates(style="display:none" data-prescriptions-target="homeDeliveryDates")
        .row
          .small-12.medium-4.large-3.columns
          .small-12.medium-8.large-9.columns
            label.right.inline Last home prescription date:
            b= l(prescription.last_delivery_date)

        .row
          .small-12.medium-4.large-3.columns
          .small-12.medium-8.large-9.columns
            label.right.inline Next home prescription date:
            b= l(prescription.next_delivery_date)

    .mt-6
      - back_path = back_url(patient_prescriptions_path(patient, treatable_id: prescription.treatable_id, treatable_type: prescription.treatable_type))

      - if policy(prescription).create?
        = save_or_cancel(form: f, back_path: back_path)
      - else
        = link_to t("btn.cancel"), back_path
