/ Render any filters defined in the view (ViewMetadata) #filters hash (hstore).
/ The format of the filters is
/   column_names: filter_type (list|search)
/ e.g
/   sex: :list => will render a dropdown of unique options pulled from the underlying view
/   nhs_number: :search => maps to case insensitive ransack predicate
/   nhs_number_or_local_patient_id: :search => will add _cont to end and use that as the predicate

- return if options.current_view.filters.empty?

- url = patients_mdms_path(scope: params[:scope], filter: params[:filter])
= simple_form_for options.search,
                  url: patients_mdms_path(scope: params[:scope], filter: params[:filter]),
                  method: :get do |f|

  .flex.flex-col.sm:flex-row.items-end.pb-4
    - options.current_view.filters.each do |filter|

      - column = filter.code
      - type = filter.type
      - filter_type = ActiveSupport::StringInquirer.new(type)

      - if filter_type.list?
        / Build and cache the filter dropdown options
        - cache_key = [options.current_view.view_name, column, filter.type]
        - collection = Rails.cache.fetch(cache_key, expires_in: Renalware.config.report_filter_cache_expiry_seconds.seconds) do
          - options.search.klass.distinct(column.to_sym).pluck(column.to_sym).compact

        / Unique values selected from a dropdown
        .w-full.sm:max-w-xs.pr-2
          = f.input "#{column}_eq",
                    include_blank: true,
                    collection: collection,
                    label: column.humanize
          / input_html: { onchange: "this.form.submit();" }
      - elsif filter_type.search?
        / Free text inputs
        .w-full.sm:max-w-xs.pr-2
          = f.input "#{column}_cont", label: column.humanize

    .w-full.sm:max-w-xs.pr-2
      .mb-4= filter_or_reset(form: f, reset_path: url)

