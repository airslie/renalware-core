ruby:
  # TODO: refactor out of the view :)
  relation = patient.prescriptions.having_drug_of_type("esa")
  esa_prescriptions = Renalware::Medications::PrescriptionsQuery.new(relation: relation).call
    .with_created_by
    .with_medication_route
    .with_drugs
    .with_classifications
    .eager_load(drug: [:drug_types])
    .map { |prescrip| Renalware::Medications::PrescriptionPresenter.new(prescrip) }

  relation = patient.prescriptions.having_drug_of_type("iron")
  iron_prescriptions = Renalware::Medications::PrescriptionsQuery.new(relation: relation).call
    .with_created_by
    .with_medication_route
    .with_drugs
    .with_classifications
    .eager_load(drug: [:drug_types])
    .map { |prescrip| Renalware::Medications::PrescriptionPresenter.new(prescrip) }


.flex.flex-row.md:flex-row.flex-wrap
  - charts.each do |chart|
      .md:w-full.lg:w-1/2.xl:w-1/3
        = render(Renalware::Pathology::ChartComponent.new(chartable: chart, patient: patient))

article
  header.mb-4
    h2 Prescriptions
    .supplemental
      span= link_to t("btn.view_all"),
              patient_prescriptions_path(patient),
              class: "button secondary"

  = render Renalware::Medications::TabbedPrescriptionsListComponent.new([ \
    { title: "EPO", show_administer_on_hd: true, prescriptions: esa_prescriptions, show_terminated_on: true },
    { title: "Iron", show_administer_on_hd: true, prescriptions: iron_prescriptions, show_terminated_on: true }])

= render Renalware::Events::EventListComponent.new(\
    patient: patient,
    event_class: nil,
    event_type_slug: "iron_clinic",
    title: "Iron Clinic Events")
