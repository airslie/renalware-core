- # locals: (form:, q: nil, named_filter:, letters:)

ruby:
  form_opts = if Renalware.config.letters_render_pdfs_with_prawn
                {
                  data: {
                    controller: "letters-batch-compile",
                    action: "submit->letters-batch-compile#submit"
                  }
                }
              else
                {}
              end

.search-form.filters
  = simple_form_for form,
                    as: :q,
                    url: renalware.letters_filtered_letters_list_path(named_filter: named_filter),
                    html: { autocomplete: "off" },
                    data: { turbo_frame: "letter-lists-turbo-frame",
                            turbo: true,
                            turbo_advance: true,
                            controller: "form",
                            action: "input->form#submit" },
                    method: :get do |f|

    .flex.gap-1.flex-wrap
      div.min-w-24.w-24
        = f.input :enclosures_present,
                  as: :select,
                  label: "Enclosure",
                  input_html: { disabled: form.disabled_inputs.include?(:enclosures_present) }

      div.min-w-16
        = f.input :notes_present,
                  as: :select,
                  label: "Notes",
                  input_html: { disabled: form.disabled_inputs.include?(:notes_present) }
      div.min-w-52
        = f.input :state_eq,
                  collection: form.letter_state_options,
                  label: "State",
                  include_blank: form.allow_blank_inputs.include?(:state_eq),
                  input_html: { disabled: form.disabled_inputs.include?(:state_eq) }
      div.w-72
        = f.input :author_id_eq,
                  as: :user_picker,
                  collection: form.author_options,
                  label: "Author",
                  input_html: { disabled: form.disabled_inputs.include?(:author_id_eq),
                  data: { controller: "slimselect", action: "change->form#submit" }}
      div.w-72
        = f.input :created_by_id_eq,
                  as: :user_picker,
                  collection: form.typist_options,
                  label: "Typist",
                  input_html: { data: { controller: "slimselect", action: "change->form#submit" }}
      div.w-56
        = f.input :letterhead_id_eq,
                  collection: form.letterhead_options,
                  label: "Letterhead"
      div
        = f.input :clinic_visit_clinic_id_eq,
                  collection: form.clinic_visit_clinic_options,
                  label: "Clinic Visit Clinic"
      div.min-w-24
        = f.input :page_count_in_array,
                  collection: form.page_count_options,
                  label: "Pages",
                  include_blank: form.allow_blank_inputs.include?(:page_count_in_array)
      - if Renalware.config.send_gp_letters_over_mesh
        div
          / selected: form.pre_selected_gp_send_status_options,

          = f.input :gp_send_status_in,
                    collection: form.gp_send_status_options,
                    label: "GP Send",
                    include_blank: form.allow_blank_inputs.include?(:gp_send_status_in),
                    input_html: { \
                      class: "content-center",
                      disabled: form.disabled_inputs.include?(:gp_send_status_in),
                      multiple: "multiple",
                      data: { controller: "slimselect", action: "change->form#submit" } \
                    }
      div
        .pt-6
          .ml-2= link_to("Reset", renalware.letters_filtered_letters_list_path(named_filter: named_filter), class: "btn btn-secondary py-1 mt-px")
        noscript
          .mb-2= filter_or_reset(form: f, reset_path: renalware.letters_filtered_letters_list_path(named_filter: named_filter))

- if named_filter == :batch_printable

  ruby:
    button_title = if letters.total_count > Renalware.config.max_batch_print_size
                      "Batch print #{Renalware.config.max_batch_print_size} of #{letters.total_count} letters"
                    else
                      "Batch print all #{letters.total_count} letters"
                    end

  / This form will all hidden fields and one button is otherwise a mirror of the above filter form.
  / It POSTs the form to create a batch and its items (which really just help us to keep track)
  / or what was printed and the user does not need to know about it) and once created
  / it pops up a dialog with a spinner and an async_render partial that, once the PDFs are compiled
  / will return with a partial containing a link to the PDF. The user clicks on this to open it in a
  / new window. At the same time on the original page we close the modal and display another one
  / which asks the user if the print batch was successful - if so we send a patch to update
  / the batch status and set letter status to Completed.

  = simple_form_for form,
                    as: :batch,
                    url: letters_batches_path,
                    method: :post,
                    remote: true,
                    **form_opts do |f|
    = f.input :enclosures_present, as: :hidden
    = f.input :notes_present, as: :hidden
    = f.input :state_eq, as: :hidden
    / = f.input :gp_send_status_in, as: :hidden / controller knows which gp_send_status_in apply
    = f.input :author_id_eq, as: :hidden
    = f.input :created_by_id_eq, as: :hidden
    = f.input :letterhead_id_eq, as: :hidden
    = f.input :page_count_in_array, as: :hidden
    - if letters.total_count > 0
      = f.submit button_title, class: "button", disabled: letters.none?, formtarget: "_blank"

  #batch-print-modal.reveal-modal.small(data-reveal
    data-options="close_on_background_click:false")
