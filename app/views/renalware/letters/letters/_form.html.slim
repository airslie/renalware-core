ruby:
  back_path = patient_letters_letters_path(patient)
  event = letter.event

.form-content data-controller="letters-form"
  / Using this syntax rather than 'render event' becuase that syntax seems to want to
  / prepend renalware/letters to event.to_partial_path (even if the latter is an absolute path)
  = render(partial: event.to_partial_path, locals: { event: event }) if event.present?

  article
    header
      h2 Header

    = f.association :letterhead, autofocus: true

    - frame_url = renalware.url_for(request.params.merge(preview_topic_id: "REPLACE_ID"))

    .mb-3
      = f.association :topic,
                required: true,
                collection: Renalware::Letters::TopicsPresenter.list_for_dropdown(frame_url),
                input_html: { \
                  data: { \
                    controller: "slimselect select-update-frame",
                    "select-update-frame-frame-id-value": "letter_sections",
                    "action": "change->select-update-frame#change" \
                  },
                }

    = f.input :clinical, as: :hidden
    = f.association :author,
        as: :user_picker,
        collection: Renalware::System::UsersPresenter.new.list_for_dropdown( \
          user_to_promote_to_top: current_user \
        )

  = render "pathology", letter: letter, f: f

  = turbo_frame_tag "letter_sections" do
    - topic = params[:preview_topic_id].present? ? Renalware::Letters::Topic.find(params[:preview_topic_id]) : letter.topic
    - if topic
      - Renalware::Letters::SectionManager.new(letter.__getobj__).edit_sections_for_topic(topic: topic).each do |section|
        = render section.to_edit_partial_path, section: section, form: f

  = render "problems_prescriptions", letter: letter
  = render "main_recipient", f: f, contacts: contacts, patient: patient, letter: letter
  = render "additional_ccs", f: f, contacts: contacts, patient: patient, letter: letter
  = render "electronic_ccs",
           f: f,
           contacts: contacts,
           patient: patient,
           electronic_recipient_options: electronic_recipient_options

  article
    header
      h2 Message

    = f.input :salutation
    = snippets_modal_and_link_to_open_it(target_input_for_seleted_snippet: ".letter-body-editor")

    - if event&.respond_to?(:notes)

      = link_to "Insert #{event.class.name.demodulize.underscore.humanize.downcase} notes",
                "/",
                data: { action: "click->letters-form#initInsertEventNotesIntoTrixEditor",
                        notes: event.notes || "" },
                class: "insert-data-notes button alternative right editor-toolbar-button"

    = f.input :body,
              as: :trix_editor,
              wrapper: :zilch,
              data: { "letters-form-target": "trix" }

  article
    header
      h2 Online References / QR Codes

    = f.association :online_reference_links,
                    label: false,
                    wrapper: :zilch,
                    input_html: { data: { controller: "slimselect" }}
  article
    header
      h2 Admin
    = f.input :notes, as: :text, input_html: { rows: 4 }
    = f.input :enclosures

.row.bottom
  .large-12.columns
    = save_or_cancel(form: f, back_path: back_path)