- toggle_prefix ||= "event"
- query ||= nil
- sortable = query.present? && local_assigns.fetch(:sortable_columns, false)
- path = [:renalware, query] if sortable

table.has-togglable-rows.events-table
  thead
    tr
      th.noprint.togglers= table_toggler
      th.col-width-tiny
      th.created_at.col-width-date-time= sort_link_if(sortable, query, :date_time, t(".date_time"))
      - unless local_assigns.fetch(:exclude_type_column, false)
        th.show-for-large-up.col-width-small= sort_link_if(sortable, query, :event_type_category_name, t(".category"))
        th.col-width-medium= sort_link_if(sortable, query, :event_type_name, t(".type"))
      - if local_assigns.fetch(:include_patient_column, false)
        th.col-width-large= t(".patient")
      th= local_assigns.fetch(:description_column_title, t(".description"))
      th.col-width-date.show-for-medium-up= sort_link_if(sortable, query, :updated_at, t(".updated_at"))
      th.col-width-medium.show-for-large-up=t(".updated_by")

  tbody
    / Note we can't use cached: true yet when rendering the events collection, as each row is
    / used in a different context and displays there slightly differently, for example showing
    / an Edit link or Type column in certain circumstances.
    = render partial: "renalware/events/events/event",
             collection: events,
             locals: { \
              exclude_type_column: local_assigns[:exclude_type_column],
              include_patient_column: local_assigns[:include_patient_column],
              edit_proc: local_assigns[:edit_proc],
              toggle_prefix: toggle_prefix \
            }
