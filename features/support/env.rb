ENV["RAILS_ENV"] ||= "test"

if ENV.key?("CC_TEST_REPORTER_ID") || ENV.key?("SIMPLECOV")
  require "simplecov"
  SimpleCov.command_name "Cucumber-#{ENV['TEST_DEPTH'] || 'domain'}"
end

require File.expand_path("../../demo/config/environment.rb", __dir__)

# Tell cucumber-rails where rails lives
ENV["RAILS_ROOT"] ||= "#{File.dirname(__FILE__)}../../../demo"

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require "cucumber/rails"
require "capybara-screenshot/cucumber"
require "rspec/rails"
require "webmock/cucumber"

require "factory_bot"
require "./spec/support/factory_bot"
FactoryBot.find_definitions

WebMock.disable_net_connect!(allow_localhost: true, allow: "chromedriver.storage.googleapis.com")

# Capybara defaults to CSS3 selectors rather than XPath.
# If you"d prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath
Capybara.default_max_wait_time = 7 # in seconds

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false
require "capybara-playwright-driver"

Capybara.configure do |config|
  config.default_max_wait_time = 15
  config.default_driver = :playwright
  config.javascript_driver = :playwright
  config.save_path = "tmp/capybara"
  # config.app_host = 'http://localhost:9887' # Update with your app host
  # config.server = :puma, { Silent: true }
  # config.server_port = 9887  # Custom port to avoid conflicts
  # config.always_include_port = true
end

Capybara.register_driver(:playwright) do |app|
  driver = Capybara::Playwright::Driver.new(
    app,
    browser_type: :chromium,
    headless: true,
    timeout: 15_000 # Add explicit timeout in ms
    # recordTrace: true,
    # tracesDir: "tmp/traces",
    # base_url: 'http://localhost:9887', # Update with your app host
    # debug: true # Enable debug logging
  )

  # Add console log monitoring
  # driver.page.on("console") do |msg|
  #   puts "BROWSER CONSOLE: #{msg.type}: #{msg.text}"
  # end

  driver
end

Capybara::Screenshot.register_driver(:playwright) do |driver, path|
  driver.save_screenshot(path)
end

require_relative "world"
